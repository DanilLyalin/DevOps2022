/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.47
 * Generated at: 2022-10-26 18:07:27 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class scores_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html lang=\"en\">\n");
      out.write("<head>\n");
      out.write("    <meta charset=\"UTF-8\">\n");
      out.write("    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n");
      out.write("    <title>Document</title>\n");
      out.write("    <style>\n");
      out.write("        html { overflow:  hidden; }\n");
      out.write("    </style>\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("    <div class=\"gameWind\" style=\"width: 100%;\n");
      out.write("                                 height: 100%;\n");
      out.write("                                 position: absolute;\n");
      out.write("                                 top: 0;\n");
      out.write("                                 left: 0;\n");
      out.write("                                 overflow: auto;\n");
      out.write("                                 white-space: nowrap;\n");
      out.write("                                 text-align: center;\n");
      out.write("                                 font-size: 0;\">\n");
      out.write("        <canvas height=\"700\" width=\"320\" id=\"Left\" style=\"margin-top: 1.5%; margin-right: 2px;\"></canvas>\n");
      out.write("        <canvas height=\"700\" width=\"400\" id=\"LeaderBoard\" style=\"margin-top: 1.5%;\" ></canvas>\n");
      out.write("        <canvas height=\"700\" width=\"320\" id=\"Right\"style=\"margin-top: 1.5%; margin-left: 2px;\"></canvas>\n");
      out.write("    </div>\n");
      out.write("    <div>\n");
      out.write("        <p id=\"all\" style=\"visibility: hidden;\">");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${all}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write("</p>\n");
      out.write("    </div>\n");
      out.write("<script>\n");
      out.write("    var LB = document.getElementById('LeaderBoard');\n");
      out.write("    var LBcontext = LB.getContext('2d');\n");
      out.write("    var Left = document.getElementById('Left');\n");
      out.write("    var Leftcontext = Left.getContext('2d');\n");
      out.write("\n");
      out.write("    function leaderBoard(){\n");
      out.write("            let jsonTop = document.getElementById('all').innerHTML;\n");
      out.write("            jsonTop = JSON.parse(jsonTop);\n");
      out.write("            LB.height = 40 * jsonTop.length + 80;\n");
      out.write("            Left.height = LB.height;\n");
      out.write("            LBcontext.fillStyle = 'black';\n");
      out.write("            LBcontext.fillRect(0, 0, LB.width, LB.height);\n");
      out.write("            LBcontext.fillStyle = 'white';\n");
      out.write("            LBcontext.globalAlpha = 1;\n");
      out.write("            LBcontext.strokeStyle = 'black';\n");
      out.write("            LBcontext.fillRect(0, 0, LB.width, 60);\n");
      out.write("            LBcontext.strokeRect(0, 0, LB.width, 60);\n");
      out.write("            LBcontext.strokeRect(2, 2, LB.width-3, 58);\n");
      out.write("            LBcontext.globalAlpha = 1;\n");
      out.write("            LBcontext.fillStyle = 'white';\n");
      out.write("            LBcontext.fillRect(LB.width/3*2, 3, 2, LB.height);\n");
      out.write("            LBcontext.fillStyle = 'black';\n");
      out.write("            LBcontext.font = '36px monospace';\n");
      out.write("            LBcontext.textAlign = 'center';\n");
      out.write("            LBcontext.textBaseline = 'middle';\n");
      out.write("            LBcontext.fillText('Leaderboard', LB.width / 2, 30);\n");
      out.write("            LBcontext.fillStyle = 'white';\n");
      out.write("            LBcontext.font = '30px monospace';\n");
      out.write("            let numSpaces;\n");
      out.write("            let spaces =\"\";\n");
      out.write("            for(let i = 0; i < jsonTop.length; i++){\n");
      out.write("                if (i < jsonTop.length){\n");
      out.write("                LBcontext.textAlign = 'left';\n");
      out.write("                LBcontext.fillText(jsonTop[i].name, 20 , 80+40*i);\n");
      out.write("                LBcontext.textAlign = 'right';\n");
      out.write("                LBcontext.fillText(jsonTop[i].score+'\\n', LB.width -10 , 80+40*i);\n");
      out.write("                }\n");
      out.write("            }\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        function drawButtonBack(){\n");
      out.write("            var btnBack = {\n");
      out.write("                x:Left.width/2 - 60,\n");
      out.write("                y:10,\n");
      out.write("                w:120,\n");
      out.write("                h:40,\n");
      out.write("                text:\"Go back\",\n");
      out.write("                state:\"default\",\n");
      out.write("                draw: function(){\n");
      out.write("                    Leftcontext.font = \"20px Arial \";\n");
      out.write("                    switch(this.state){\n");
      out.write("                        case \"over\":      \n");
      out.write("                        Leftcontext.fillStyle = \"red\";\n");
      out.write("                            Leftcontext.fillRect(this.x,this.y,this.w,this.h);\n");
      out.write("                        Leftcontext.fillStyle = \"black\";\n");
      out.write("                        Leftcontext.fillText(\"Go back?\",this.x+this.w/2 - Leftcontext.measureText(\"Go back\").width/2,this.y+this.h/2+10 );\n");
      out.write("                    break;\n");
      out.write("                        default:\n");
      out.write("                        Leftcontext.fillStyle = \"gray\";\n");
      out.write("                            Leftcontext.fillRect(this.x,this.y,this.w,this.h);\n");
      out.write("                        Leftcontext.fillStyle = \"black\";\n");
      out.write("                        Leftcontext.fillText(\"Go back\",this.x+this.w/2 - Leftcontext.measureText(\"Go back\").width/2,this.y+this.h/2+10 );\n");
      out.write("                    }\n");
      out.write("                }\n");
      out.write("            };\n");
      out.write("            btnBack.draw();\n");
      out.write("            Left.addEventListener(\"mousedown\",function(e){\n");
      out.write("                    if(checkCollision(e.offsetX,e.offsetY,btnBack )){\n");
      out.write("                            document.location.href = \"http://localhost:8080/ServletTetris/game\";\n");
      out.write("                        }\n");
      out.write("            },false);\n");
      out.write("            \n");
      out.write("            \n");
      out.write("            Left.addEventListener(\"mousemove\",function(e){\n");
      out.write("            btnBack.state = checkCollision(e.offsetX,e.offsetY,btnBack )?\"over\":\"def\";\n");
      out.write("                btnBack.draw();\n");
      out.write("            },false);\n");
      out.write("            \n");
      out.write("            function checkCollision(x,y,obj){\n");
      out.write("                return x >= obj.x && x <= obj.x + obj.w &&\n");
      out.write("                y >= obj.y && y <= obj.y + obj.h ;\n");
      out.write("            }\n");
      out.write("        }\n");
      out.write("        \n");
      out.write("        leaderBoard();\n");
      out.write("        drawButtonBack();\n");
      out.write("</script>\n");
      out.write("</body>\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
